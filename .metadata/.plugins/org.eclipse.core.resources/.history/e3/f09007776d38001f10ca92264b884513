package com.eyiron.product_app_project.service;

import java.util.Base64;
import java.util.List;
import java.util.Optional;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.eyiron.product_app_project.dao.ProductUsersRepo;
import com.eyiron.product_app_project.model.ProductUsers;

@Service
public class ProductUserService {

	@Autowired
	private ProductUsersRepo usersRepo;

//	save user details
	public void saveUser(ProductUsers user) {
	    String password = user.getPassword();
	    // Log the email
	    System.out.println(user.getEmail());
	    
	    // Check if the password is Base64 encoded
	    if (isBase64Encoded(password)) {
	        try {
	            // Decode the Base64 encoded password
	            password = new String(Base64.getDecoder().decode(password));
	        } catch (IllegalArgumentException e) {
	            System.out.println("Password is not properly Base64 encoded.");
	        }
	    }

	    // Set the decoded or original password back to the user object
	    user.setPassword(password);
	    // Save the user to the repository
	    usersRepo.save(user);
	}

	// Helper method to check if a string is Base64 encoded
	private boolean isBase64Encoded(String string) {
	    String base64Pattern = "^[A-Za-z0-9+/=]+$";
	    Pattern pattern = Pattern.compile(base64Pattern);
	    return pattern.matcher(string).matches();
	}

//	validation user email password
	public ProductUsers validationService(String email, String password) {
		ProductUsers productUsers = usersRepo.findByEmailAndPassword(email, password);
		if (productUsers != null) {
			String str = "Active";
			if (productUsers.getStatus().equals(str)) {
				return productUsers;
			} else {
				return null;
			}
		} else {
			return null;
		}
	}

//	get all user
	public List<ProductUsers> getAllUsers() {
		return usersRepo.findAll();
	}

//	user delete by id
	public void deleteByIdService(int id) {
		usersRepo.deleteById(id);
	}

//	get by id user details
	public Optional<ProductUsers> getByIdUserService(int id) {
		return usersRepo.findById(id);
	}

//	save updated users details
	public void updateStatusUserService(int id, ProductUsers productUsers) {
		Optional<ProductUsers> user = usersRepo.findById(id);
		ProductUsers user1 = user.get();
		user1.setId(productUsers.getId());
		user1.setName(productUsers.getName());
		user1.setEmail(productUsers.getEmail());
		user1.setPhone(productUsers.getPhone());
		user1.setStatus(productUsers.getStatus());
		usersRepo.save(user1);

	}

}
